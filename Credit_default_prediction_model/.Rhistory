plot(as.factor(data$Instalment.per.cent))
plot(as.factor(data$Instalment.per.cent), col = "slategray", main = "Installment", xlab = "")
#Save the required packages in a variable
load_packages <- c("ggplot2","car","Hmisc","ROCR","caret","dummies","caTools",
"MASS", "gridExtra")
#load the packages
lapply(load_packages,require,character.only = TRUE)
setwd('Desktop/Data Analytics/A6')
# Download the data set as german_credit
german_credit <- read.csv("german_credit.csv",stringsAsFactors = FALSE)
#check for NA values
sum(is.na(german_credit))
#check for duplicated values
sum(duplicated(german_credit))
#check the structure and summary
str(german_credit)
summary(german_credit)
#outlier treatment
#check for outliers in numeric variables
#If outliers found than do capping and flooring
boxplot.stats(german_credit$Duration.in.month)
boxplot(german_credit$Duration.in.month)
table(german_credit$Duration.in.month)
quantile(german_credit$Duration.in.month,seq(0,1,0.01))
german_credit$Duration.in.month[which(german_credit$Duration.in.month>42)]<-quantile(german_credit$Duration.in.month,0.92)
boxplot.stats(german_credit$Credit.amount)
boxplot(german_credit$Credit.amount)
table(german_credit$Credit.amount)
quantile(german_credit$Credit.amount,seq(0,1,0.01))
german_credit$Credit.amount[which(german_credit$Credit.amount>7687.88)]<-quantile(german_credit$Credit.amount,0.92)
boxplot.stats(german_credit$Age.in.Years)
boxplot(german_credit$Age.in.Years)
table(german_credit$Age.in.Years)
quantile(german_credit$Age.in.Years,seq(0,1,0.01))
german_credit$Age.in.Years[which(german_credit$Age.in.Years>63)]<-quantile(german_credit$Age.in.Years,0.97)
#There are four numeric values in this variable 1,2,3,4
#As there are equally spaced it is considered as numeric itself
boxplot.stats(german_credit$Number.of.existing.credits.at.this.bank.)
boxplot(german_credit$Number.of.existing.credits.at.this.bank.)
table(german_credit$Number.of.existing.credits.at.this.bank.)
#There are four numeric values in this variable 1,2
#As there are equally spaced it is considered as numeric itself
boxplot.stats(german_credit$Number.of.people.being.liable.to.provide.maintenance.for.)
boxplot(german_credit$Number.of.people.being.liable.to.provide.maintenance.for.)
table(german_credit$Number.of.people.being.liable.to.provide.maintenance.for.)
#There are four numeric values in this variable 1,2,3,4
#As there are equally spaced it is considered as numeric itself
boxplot.stats(german_credit$Installment.rate.in.percentage.of.disposable.income)
boxplot(german_credit$Installment.rate.in.percentage.of.disposable.income)
table(german_credit$Installment.rate.in.percentage.of.disposable.income)
#There are four numeric values in this variable 1,2,3,4
#As there are equally spaced it is considered as numeric itself
boxplot.stats(german_credit$Present.residence.since)
boxplot(german_credit$Present.residence.since)
table(german_credit$Present.residence.since)
#plot credit history
loan_credit_history <-  ggplot(german_credit,aes(x=Credit.history,fill=factor(Default_status)))+geom_bar()+
scale_x_discrete(limits=c("A32","A34","A33","A31","A30"))+guides(fill=FALSE)
print(loan_credit_history)
View(german_credit)
#Save the required packages in a variable
load_packages <- c("ggplot2","car","Hmisc","ROCR","caret","dummies","caTools",
"MASS", "gridExtra")
#load the packages
lapply(load_packages,require,character.only = TRUE)
setwd('Desktop/Data Analytics/A6')
# Download the data set as german_credit
german_credit <- read.csv("german.csv",stringsAsFactors = FALSE)
# Download the data set as german_credit
german_credit <- read.csv("german.csv",stringsAsFactors = FALSE)
#check for NA values
sum(is.na(german_credit))
#check for duplicated values
sum(duplicated(german_credit))
#check the structure and summary
str(german_credit)
summary(german_credit)
#outlier treatment
#check for outliers in numeric variables
#If outliers found than do capping and flooring
boxplot.stats(german_credit$Duration.in.month)
boxplot(german_credit$Duration.in.month)
table(german_credit$Duration.in.month)
quantile(german_credit$Duration.in.month,seq(0,1,0.01))
german_credit$Duration.in.month[which(german_credit$Duration.in.month>42)]<-quantile(german_credit$Duration.in.month,0.92)
boxplot.stats(german_credit$Credit.amount)
boxplot(german_credit$Credit.amount)
table(german_credit$Credit.amount)
quantile(german_credit$Credit.amount,seq(0,1,0.01))
german_credit$Credit.amount[which(german_credit$Credit.amount>7687.88)]<-quantile(german_credit$Credit.amount,0.92)
boxplot.stats(german_credit$Age.in.Years)
boxplot(german_credit$Age.in.Years)
table(german_credit$Age.in.Years)
quantile(german_credit$Age.in.Years,seq(0,1,0.01))
german_credit$Age.in.Years[which(german_credit$Age.in.Years>63)]<-quantile(german_credit$Age.in.Years,0.97)
#There are four numeric values in this variable 1,2,3,4
#As there are equally spaced it is considered as numeric itself
boxplot.stats(german_credit$Number.of.existing.credits.at.this.bank.)
boxplot(german_credit$Number.of.existing.credits.at.this.bank.)
table(german_credit$Number.of.existing.credits.at.this.bank.)
#There are four numeric values in this variable 1,2
#As there are equally spaced it is considered as numeric itself
boxplot.stats(german_credit$Number.of.people.being.liable.to.provide.maintenance.for.)
boxplot(german_credit$Number.of.people.being.liable.to.provide.maintenance.for.)
table(german_credit$Number.of.people.being.liable.to.provide.maintenance.for.)
#There are four numeric values in this variable 1,2,3,4
#As there are equally spaced it is considered as numeric itself
boxplot.stats(german_credit$Installment.rate.in.percentage.of.disposable.income)
boxplot(german_credit$Installment.rate.in.percentage.of.disposable.income)
table(german_credit$Installment.rate.in.percentage.of.disposable.income)
#There are four numeric values in this variable 1,2,3,4
#As there are equally spaced it is considered as numeric itself
boxplot.stats(german_credit$Present.residence.since)
boxplot(german_credit$Present.residence.since)
table(german_credit$Present.residence.since)
#plot credit history
loan_credit_history <-  ggplot(german_credit,aes(x=,fill=factor(Default_status)))+geom_bar()+
scale_x_discrete(limits=c("A32","A34","A33","A31","A30"))+guides(fill=FALSE)
print(loan_credit_history)
#plot credit history
loan_credit_history <-  ggplot(german_credit,aes(x=Credit.history,fill=factor(Default_status)))+geom_bar()+
scale_x_discrete(limits=c("A32","A34","A33","A31","A30"))+guides(fill=FALSE)
print(loan_credit_history)
#plot loan purpose
loan_purpose <-  ggplot(german_credit,aes(x=Purpose,fill=factor(Default_status)))+geom_bar( )+
scale_x_discrete(limits=c("A43","A40","A42","A41","A49","A46","A45",
"A44","A410","A48"))+guides(fill=FALSE)
#plot credit amount
credit_amount <-  ggplot(german_credit,aes(x=Credit.amount,
fill=factor(Default_status)))+geom_histogram(binwidth = 500)+guides(fill=FALSE)
#plot Installment_rate
Installment_rate <- ggplot(german_credit,aes(x=factor(Installment.rate.in.percentage.of.disposable.income),
fill=factor(Default_status)))+geom_bar()+
guides(fill=guide_legend(reverse=TRUE))+scale_fill_discrete(labels=c("Good","Bad"))+
labs(fill='Loan status')+scale_x_discrete(limits=c("4","2","3","1"))
grid.arrange(loan_credit_history,loan_purpose,
credit_amount,Installment_rate, ncol=2,
top = "Univariate Analysis")
library("grid", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
grid.arrange(loan_credit_history,loan_purpose,
credit_amount,Installment_rate, ncol=2,
top = "Univariate Analysis")
install.packages("gridExtra")
library("gridExtra", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
detach("package:grid", unload=TRUE)
grid.arrange(loan_credit_history,loan_purpose,
credit_amount,Installment_rate, ncol=2,
top = "Univariate Analysis")
grid.arrange(loan_credit_history,loan_purpose,
credit_amount,Installment_rate, ncol=1,
top = "Univariate Analysis")
grid.arrange(loan_credit_history,loan_purpose,
credit_amount,Installment_rate, ncol=4,
top = "Univariate Analysis")
grid.arrange(loan_credit_history,loan_purpose,
credit_amount,Installment_rate, ncol=2,
top = "Univariate Analysis")
#plot loan property
loan_propery <-  ggplot(german_credit,aes(x=Property,fill=factor(Default_status)))+geom_bar( )+
scale_x_discrete(limits=c("A123","A121","A122","A124"))+guides(fill=FALSE)
#plot housing
loan_housing <-  ggplot(german_credit,aes(x=Housing.,fill=factor(Default_status)))+geom_bar( )+
scale_x_discrete(limits=c("A152","A151","A153"))+guides(fill=FALSE)
#plot loan job
loan_job <-  ggplot(german_credit,aes(x=Job_status,fill=factor(Default_status)))+geom_bar( )+
scale_x_discrete(limits=c("A173","A172","A174","A171"))+guides(fill=FALSE)
#plot loan telephone
loan_telephone <- ggplot(german_credit,aes(x=Telephone.,fill=factor(Default_status)))+geom_bar( )+
guides(fill=guide_legend(reverse=TRUE))+
labs(fill='Loan status')+scale_fill_discrete(labels=c("Good","Bad"))
grid.arrange(loan_credit_history,loan_purpose,
credit_amount,Installment_rate,loan_propery,loan_housing,
loan_job,loan_telephone, ncol=4,
top = "Univariate Analysis")
grid.arrange(loan_credit_history,loan_purpose,
credit_amount,Installment_rate,loan_propery,loan_housing,loan_job,loan_telephone, ncol=4,
top = "Univariate Analysis")
View(german_credit)
#plot housing
loan_housing <-  ggplot(german_credit,aes(x=Housing,fill=factor(Default_status)))+geom_bar( )+
scale_x_discrete(limits=c("A152","A151","A153"))+guides(fill=FALSE)
grid.arrange(loan_credit_history,loan_purpose,
credit_amount,Installment_rate,loan_propery,loan_housing,loan_job,loan_telephone, ncol=4,
top = "Univariate Analysis")
#plot loan telephone
loan_telephone <- ggplot(german_credit,aes(x=Telephone,fill=factor(Default_status)))+geom_bar( )+
guides(fill=guide_legend(reverse=TRUE))+
labs(fill='Loan status')+scale_fill_discrete(labels=c("Good","Bad"))
grid.arrange(loan_credit_history,loan_purpose,
credit_amount,Installment_rate,loan_propery,loan_housing,loan_job,loan_telephone, ncol=4,
top = "Univariate Analysis")
#check the structure and summary
str(german_credit)
#checks for structure and summary of the dataset
str(data)
# Download the dataset
data <- read.csv("german_credit.csv",stringsAsFactors = FALSE,header = TRUE)
#checks for structure and summary of the dataset
str(data)
# Download the data set as german_credit
german_credit <- read.csv("german.csv",stringsAsFactors = FALSE)
#plot credit history
loan_credit_history <-  ggplot(german_credit,aes(x=Credit.history,fill=factor(Default_status)))+geom_bar()+
scale_x_discrete(limits=c("A32","A34","A33","A31","A30"))+guides(fill=FALSE)
#plot loan purpose
loan_purpose <-  ggplot(german_credit,aes(x=Purpose,fill=factor(Default_status)))+geom_bar( )+
scale_x_discrete(limits=c("A43","A40","A42","A41","A49","A46","A45",
"A44","A410","A48"))+guides(fill=FALSE)
#plot credit amount
credit_amount <-  ggplot(german_credit,aes(x=Credit.amount,
fill=factor(Default_status)))+geom_histogram(binwidth = 500)+guides(fill=FALSE)
#plot Installment_rate
Installment_rate <- ggplot(german_credit,aes(x=factor(Installment.rate.in.percentage.of.disposable.income),
fill=factor(Default_status)))+geom_bar()+
guides(fill=guide_legend(reverse=TRUE))+scale_fill_discrete(labels=c("Good","Bad"))+
labs(fill='Loan status')+scale_x_discrete(limits=c("4","2","3","1"))
#plot loan property
loan_propery <-  ggplot(german_credit,aes(x=Property,fill=factor(Default_status)))+geom_bar( )+
scale_x_discrete(limits=c("A123","A121","A122","A124"))+guides(fill=FALSE)
#plot housing
loan_housing <-  ggplot(german_credit,aes(x=Housing,fill=factor(Default_status)))+geom_bar( )+
scale_x_discrete(limits=c("A152","A151","A153"))+guides(fill=FALSE)
#plot loan job
loan_job <-  ggplot(german_credit,aes(x=Job_status,fill=factor(Default_status)))+geom_bar( )+
scale_x_discrete(limits=c("A173","A172","A174","A171"))+guides(fill=FALSE)
#plot loan telephone
loan_telephone <- ggplot(german_credit,aes(x=Telephone,fill=factor(Default_status)))+geom_bar( )+
guides(fill=guide_legend(reverse=TRUE))+
labs(fill='Loan status')+scale_fill_discrete(labels=c("Good","Bad"))
#plot credit history
loan_credit_history <-  ggplot(german_credit,aes(x=Credit.history,fill=factor(Default_status)))+geom_bar()+
scale_x_discrete(limits=c("A32","A34","A33","A31","A30"))+guides(fill=FALSE)
#plot loan purpose
loan_purpose <-  ggplot(german_credit,aes(x=Purpose,fill=factor(Default_status)))+geom_bar( )+
scale_x_discrete(limits=c("A43","A40","A42","A41","A49","A46","A45",
"A44","A410","A48"))+guides(fill=FALSE)
#plot credit amount
credit_amount <-  ggplot(german_credit,aes(x=Credit.amount,
fill=factor(Default_status)))+geom_histogram(binwidth = 500)+guides(fill=FALSE)
#plot Installment_rate
Installment_rate <- ggplot(german_credit,aes(x=factor(Installment.rate.in.percentage.of.disposable.income),
fill=factor(Default_status)))+geom_bar()+
guides(fill=guide_legend(reverse=TRUE))+scale_fill_discrete(labels=c("Good","Bad"))+
labs(fill='Loan status')+scale_x_discrete(limits=c("4","2","3","1"))
#plot loan property
loan_propery <-  ggplot(german_credit,aes(x=Property,fill=factor(Default_status)))+geom_bar( )+
scale_x_discrete(limits=c("A123","A121","A122","A124"))+guides(fill=FALSE)
#plot housing
loan_housing <-  ggplot(german_credit,aes(x=Housing,fill=factor(Default_status)))+geom_bar( )+
scale_x_discrete(limits=c("A152","A151","A153"))+guides(fill=FALSE)
#plot loan job
loan_job <-  ggplot(german_credit,aes(x=Job_status,fill=factor(Default_status)))+geom_bar( )+
scale_x_discrete(limits=c("A173","A172","A174","A171"))+guides(fill=FALSE)
#plot loan telephone
loan_telephone <- ggplot(german_credit,aes(x=Telephone,fill=factor(Default_status)))+geom_bar( )+
guides(fill=guide_legend(reverse=TRUE))+
labs(fill='Loan status')+scale_fill_discrete(labels=c("Good","Bad"))
#plot checking account
loan_checking_account <- ggplot(german_credit,aes(x=Status.of.existing.checking.account,fill=factor(Default_status)))+geom_bar( )+
scale_x_discrete(limits=c("A14","A11","A12","A13"))+guides(fill=FALSE)
#plot savings bonds
loan_savings_bonds <- ggplot(german_credit,aes(x=Savings.account.bonds,fill=factor(Default_status)))+geom_bar( )+
scale_x_discrete(limits=c("A61","A65","A62","A63","A64"))+guides(fill=FALSE)
#plot loan duration
loan_duration <- ggplot(german_credit,aes(x=Duration.in.month,fill=factor(Default_status)))+geom_histogram(binwidth = 5)+
guides(fill=FALSE)
#plot loan other debtors
loan_debtors <- ggplot(german_credit,aes(x=Other.debtors...guarantors,fill=factor(Default_status)))+geom_bar( )+
guides(fill=guide_legend(reverse=TRUE))+scale_x_discrete(limits=c("A101","A103","A102"))+
labs(fill='Loan status')+scale_fill_discrete(labels=c("Good","Bad"))
grid.arrange(loan_checking_account,loan_debtors,loan_duration,
loan_savings_bonds,ncol=4,top = "Univariate Analysis")
grid.arrange(loan_credit_history, loan_purpose,credit_amount,Installment_rate, loan_propery, loan_housing,loan_job,
loan_telephone, loan_checking_account,loan_debtors,loan_duration,
loan_savings_bonds,ncol=4,top = "Univariate Analysis")
grid.arrange(loan_credit_history, loan_purpose,credit_amount,Installment_rate, loan_propery, loan_housing,loan_job,
loan_telephone, loan_checking_account,loan_debtors,loan_duration,loan_savings_bonds,ncol=4,top = "Univariate Analysis")
grid.arrange(loan_credit_history, loan_purpose,credit_amount,Installment_rate, loan_propery, loan_housing,loan_job,
loan_telephone, loan_checking_account,loan_debtors,loan_duration,loan_savings_bonds, ncol=4,top = "Univariate Analysis")
grid.arrange(loan_credit_history, loan_purpose,credit_amount,Installment_rate, loan_propery, loan_housing,loan_job,
loan_telephone, loan_checking_account,loan_debtors,loan_duration,loan_savings_bonds, ncol=3,top = "Univariate Analysis")
grid.arrange(loan_credit_history, loan_purpose,credit_amount,Installment_rate, loan_propery, loan_housing,loan_job,
loan_telephone, loan_checking_account,loan_debtors,loan_duration,loan_savings_bonds, ncol=2,top = "Univariate Analysis")
grid.arrange(loan_credit_history, loan_purpose,credit_amount,Installment_rate, loan_propery, loan_housing,loan_job,
loan_telephone, loan_checking_account,loan_debtors,loan_duration,loan_savings_bonds, ncol=4,top = "Univariate Analysis")
summary(german_credit)
#check for duplicated values
sum(duplicated(german_credit))
#outlier treatment
#check for outliers in numeric variables
#If outliers found than do capping and flooring
boxplot.stats(german_credit$Duration.in.month)
table(german_credit$Credit.amount)
#outlier treatment
#check for outliers in numeric variables
#If outliers found than do capping and flooring
boxplot.stats(german_credit$Duration.in.month)
boxplot(german_credit$Duration.in.month)
table(german_credit$Duration.in.month)
quantile(german_credit$Duration.in.month,seq(0,1,0.01))
german_credit$Duration.in.month[which(german_credit$Duration.in.month>42)]<-quantile(german_credit$Duration.in.month,0.92)
boxplot(german_credit$Duration.in.month)
# Download the dataset
data <- read.csv("german_credit.csv",stringsAsFactors = FALSE,header = TRUE)
View(data)
#correlation matrix to interpret
par(mfrow = c(1,1))
cordata<- cor(data[,-1])
corrplot(cordata, method = 'number')
library("corrplot", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
corrplot(cordata, method = 'number')
#correlation matrix to interpret
cordata<- cor(data[,-1])
corrplot(cordata, method = 'number')
#correlation matrix to interpret
cordata<- cor(data[,-1])
corrplot(cordata, method = 'number')
corrplot(cordata, method = 'color')
corrplot(cordata, method = 'spearman')
#correlation matrix to interpret
cordata<- cor(data[,-1])
corrplot(cordata, method = 'spearman')
#correlation matrix to interpret
cordata<- cor(data[,-1], method = "spearman")
corrplot(cordata, method = 'color')
#logistic Regression
#https://www.r-bloggers.com/how-to-perform-a-logistic-regression-in-r/
model <- glm(Creditability ~.,family=binomial(link='logit'),data=xtrain)
set.seed(12)
train<- sample(1:nrow(data) , 0.7*nrow(data))
xtrain<- data[train,]
xtest<- data[-train,]
#logistic Regression
#https://www.r-bloggers.com/how-to-perform-a-logistic-regression-in-r/
model <- glm(Creditability ~.,family=binomial(link='logit'),data=xtrain)
summary(model)
fitted.results <- predict(model,newdata=xtest,type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
misClasificError <- mean(fitted.results != xtest$Creditability)
print(paste('Accuracy',1-misClasificError))
#LDA
library(MASS)
ldafit <- lda(Creditability ~ Value.Savings.Stocks + Length.of.current.employment + Duration.of.Credit..month.+ Credit.Amount + Age..years., data = xtrain)
ldafit
plot(ldafit)
lda.pred <- predict(ldafit, data=xtest)
ldaclass <- lda.pred$class
table(ldaclass, xtest$Creditability)
# Download the dataset
data <- read.csv("german_credit.csv",stringsAsFactors = FALSE,header = TRUE)
set.seed(12)
train<- sample(1:nrow(data) , 0.7*nrow(data))
xtrain<- data[train,]
xtest<- data[-train,]
#LDA
library(MASS)
ldafit <- lda(Creditability ~ Value.Savings.Stocks + Length.of.current.employment + Duration.of.Credit..month.+ Credit.Amount + Age..years., data = xtrain)
ldafit
plot(ldafit)
lda.pred <- predict(ldafit, data=xtest)
ldaclass <- lda.pred$class
table(ldaclass, xtest$Creditability)
qdafit <- qda(Creditability ~ Value.Savings.Stocks + Length.of.current.employment + Duration.of.Credit..month.+ Credit.Amount + Age..years., data = xtrain)
qdafit
qda.pred <- predict(qdafit, data=xtest)
qdaclass <- qda.pred$class
table(qdaclass, xtest$Creditability)
View(data)
View(data)
View(data)
table(ldaclass, xtest$Creditability)
View(ldaclass)
View(ldaclass)
table(ldaclass, xtest$Creditability, header = FALSE)
qdafit <- qda(Creditability ~ Value.Savings.Stocks + Length.of.current.employment + Duration.of.Credit..month.+ Credit.Amount + Age..years., data = xtrain)
#Classification Tree
library(rpart)
m3.tree<- rpart(Creditability ~ . , data =xtrain, method= "class")
printcp(m3.tree) # display the results
printcp(m3.tree) # display the results
plotcp(m3.tree) # visualize cross-validation results
summary(m3.tree)# detailed summary of splits
pred <- predict(m3.tree, xtest, type="class")
table(pred, xtest$Creditability)
printcp(m3.tree) # display the results
plotcp(m3.tree) # visualize cross-validation results
plotcp(m3.tree) # visualize cross-validation results
plot(m3.tree)
text(m3.tree, pretty=0,cex=0.6)
plot(m3.tree)
rpart.plot(m3.tree)
m3.tree<- rpart(Creditability ~ . , data =xtrain, method= 'class')
rpart.plot(m3.tree)
library("rpart.plot", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
rpart.plot(m3.tree)
rpart.plot(m3.tree,fallen.leaves= FALSE)
m3.tree<- rpart(Creditability ~ . , data =xtrain, method= 'class')
printcp(m3.tree) # display the results
plotcp(m3.tree) # visualize cross-validation results
pred <- predict(m3.tree, xtest, type="class")
table(pred, xtest$Creditability)
library(randomForest)
xtrain$Creditability <- as.factor(xtrain$Creditability)
xtest$Creditability <- as.factor(xtest$Creditability)
rf50 <- randomForest(Creditability ~., data = xtrain, ntree=300, importance=T, proximity=T)
plot(rf50, main="")
rf50
Test50_rf_pred <- predict(rf50, xtest, type="class")
table(Test50_rf_pred, xtest$Creditability)
rf50 <- randomForest(Creditability ~., data = xtrain, ntree=300, importance=T, proximity=T, mtry=3)
Test50_rf_pred <- predict(rf50, xtest, type="class")
table(Test50_rf_pred, xtest$Creditability)
rf50 <- randomForest(Creditability ~., data = xtrain, ntree=300, importance=T, proximity=T, mtry=5)
plot(rf50, main="")
rf50
Test50_rf_pred <- predict(rf50, xtest, type="class")
table(Test50_rf_pred, xtest$Creditability)
importance(rf50)
varImpPlot(rf50,  main="", cex=0.8)
varImp(rf50)
varImp(Test50_rf_pred)
#LDA
library(MASS)
ldafit <- lda(Creditability ~ Value.Savings.Stocks + Length.of.current.employment + Duration.of.Credit..month.+ Credit.Amount + Age..years., data = xtrain)
ldafit
plot(ldafit)
lda.pred <- predict(ldafit, data=xtest)
View(lda.pred)
ldaclass <- lda.pred$class
table(ldaclass, xtest$Creditability, header = FALSE)
# Download the dataset
data <- read.csv("german_credit.csv",stringsAsFactors = FALSE,header = TRUE)
#LDA
library(MASS)
ldafit <- lda(Creditability ~ Value.Savings.Stocks + Length.of.current.employment + Duration.of.Credit..month.+ Credit.Amount + Age..years., data = xtrain)
View(data)
train<- sample(1:nrow(data) , 0.7*nrow(data))
xtrain<- data[train,]
xtest<- data[-train,]
#LDA
library(MASS)
ldafit <- lda(Creditability ~ Value.Savings.Stocks + Length.of.current.employment + Duration.of.Credit..month.+ Credit.Amount + Age..years., data = xtrain)
ldafit
plot(ldafit)
lda.pred <- predict(ldafit, data=xtest)
ldaclass <- lda.pred$class
table(ldaclass, xtest$Creditability)
View(ldaclass)
a <- xtest$Creditability
View(a)
table(ldaclass,a )
lda_model <- lda(Creditability~Account.Balance+Payment.Status.of.Previous.Credit+Purpose+Credit.Amount+Value.Savings.Stocks+Length.of.current.employment+Instalment.per.cent+Sex...Marital.Status+Concurrent.Credits,data=xtrain)
lda_predicted <- predict(lda_model,xtest)
lda_pred_class <- lda_predicted$class
#Confusion Matrix
table(lda_pred_class,test$Creditability)
#Confusion Matrix
table(lda_pred_class,xtest$Creditability)
ldafit <- lda(Creditability ~ Value.Savings.Stocks + Length.of.current.employment + Duration.of.Credit..month.+ Credit.Amount + Age..years., data = xtrain)
ldafit
plot(ldafit)
# Download the data set as german_credit
german_credit <- read.csv("german.csv",stringsAsFactors = FALSE)
#separate all the character variables for data preparation
#Convert the variables from character type to factor
german_credit_char <- as.data.frame(unclass(german_credit[,-c(2,5,8,11,13,16,18,21)]))
#check the structure
str(german_credit_char)
#create dummy variables for the factor variables using dummies package
german_credit_dummy <- dummy.data.frame(german_credit_char,all = FALSE)
#Remove one  dummy column  from all factor variables
german_credit_dummy <- german_credit_dummy[,-c(1,5,10,20,25,30,34,37,41,44,47,51,53)]
#Remove the original character variables from the dataframe
german_credit <- german_credit[,-c(1,3,4,6,7,9,10,12,14,15,17,19,20)]
#Bind the german credit dataframe with dummy variables dataframe
german_credit <- cbind(german_credit,german_credit_dummy)
#Check the dataframe. It should consist only numerical variables
str(german_credit)
#check for number of good/bad loans
table(german_credit$Default_status)
#split the dataframe into train and test data frames
#Ensure the same proportion of class labels in train and test datasets
#Set seed 100 for ensuring same results every time
set.seed(100)
split_indices <- sample.split(german_credit$Default_status,0.7)
train <- german_credit[split_indices==TRUE,]
test <- german_credit[split_indices==FALSE,]
table(train$Default_status)
table(test$Default_status)
# Initial Model with all variables
initial_model <- glm(Default_status~.,family = binomial, data=train)
summary(initial_model)
# Perform Stepwise selection for removing the insignificant variables
step <- stepAIC(initial_model,direction="both")
step$call
# Remove multicollinearity through VIF check
#Use the model obtained from stepAIC and check for collinearity
model_2 <- glm(formula = Default_status ~ Duration.in.month + Installment.rate.in.percentage.of.disposable.income +
Age.in.Years + Status.of.existing.checking.accountA13 + Status.of.existing.checking.accountA14 +
Credit.historyA32 + Credit.historyA33 + Credit.historyA34 +
PurposeA41 + PurposeA410 + PurposeA42 + PurposeA43 + PurposeA45 +
PurposeA49 + Savings.account.bondsA64 + Savings.account.bondsA65 +
Present.employment.since.A74 + Personal.status.and.sexA93 +
Other.debtors...guarantorsA103 + Other.installment.plansA143 +
Housing.A152, family = binomial, data = train)
summary(model_2)
#Save the required packages in a variable
load_packages <- c("ggplot2","car","Hmisc","ROCR","caret","dummies","caTools",
"MASS", "gridExtra")
#load the packages
lapply(load_packages,require,character.only = TRUE)
setwd('Desktop/Data Analytics/A6')
